Filename: =Datasets/berlin52_n255_uncorr-similar-weights_01.ttp
_Algorithm type: =AlgorithmType.STEADY_STATE
_Perform separately=False
_Population Initialization function: =init_population
_Next Generation function: =replace_the_worst_parent
_Fitness function: =fitness_ttp
_Selection TSP: =r_tournament_selection_with_replacement
_Crossover TSP=order_crossover
_Mutation TSP: =two_opt
_Selection KP: =r_tournament_selection_with_replacement
_Crossover KP: =n_point_crossover
_Mutation KP: =exchange
_Population size: =10
_Iteration number: =15
_Survival/mortality rate: =7
_Elitism: =True
_TSP path: =[40, 21, 42, 33, 16, 4, 28, 24, 8, 14, 49, 11, 0, 30, 44, 25, 18, 19, 36, 7, 29, 2, 39, 48, 17, 47, 43, 15, 12, 51, 45, 46, 34, 37, 41, 3, 32, 38, 22, 31, 10, 20, 5, 27, 26, 9, 23, 50, 1, 35, 6, 13]
_KP path: =[[], [0, 1, 0, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 1], [0, 0, 1, 0, 1], [1, 1, 1, 0, 1], [0, 1, 1, 1, 1], [1, 1, 0, 0, 1], [1, 0, 1, 0, 1], [1, 1, 0, 0, 1], [0, 0, 1, 1, 0], [0, 0, 0, 1, 1], [0, 1, 1, 0, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 1], [1, 1, 0, 1, 0], [1, 1, 0, 0, 1], [1, 0, 0, 0, 0], [1, 0, 1, 1, 0], [1, 0, 1, 0, 1], [1, 1, 1, 0, 0], [1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 0, 1], [0, 1, 1, 0, 1], [0, 0, 0, 1, 1], [1, 1, 1, 0, 1], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [1, 1, 1, 1, 1], [1, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 1], [0, 1, 1, 1, 1], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [0, 1, 1, 0, 0], [0, 1, 1, 0, 1], [1, 0, 0, 0, 1], [0, 0, 1, 0, 0], [1, 0, 0, 1, 1], [1, 1, 0, 0, 0], [1, 1, 1, 1, 0], [1, 0, 1, 1, 1]]
_Fitness value of the best chromosome: =54700.47693931143
_Average fitness value of the population: =53959.80129686254
_Age of the best chromosome (num of iterations it has lived): =1
_Local Search function: =greedy_hill_climbing
_Neighborhood TSP: =insertion
_Neighborhood KP: =bit_flip
_Number of neighbors: =10
_Number of max iterations in local search: =20
_KP constraint solver function: =kp_hard_constraint_solver
_