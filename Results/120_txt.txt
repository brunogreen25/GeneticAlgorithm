Filename: =Datasets/berlin52_n255_uncorr-similar-weights_01.ttp
_Algorithm type: =AlgorithmType.STEADY_STATE
_Perform separately=False
_Population Initialization function: =init_population
_Next Generation function: =replace_the_worst_parent
_Fitness function: =fitness_ttp
_Selection TSP: =r_tournament_selection_with_replacement
_Crossover TSP=order_crossover
_Mutation TSP: =two_opt
_Selection KP: =r_tournament_selection_with_replacement
_Crossover KP: =n_point_crossover
_Mutation KP: =exchange
_Population size: =10
_Iteration number: =15
_Survival/mortality rate: =7
_Elitism: =True
_TSP path: =[33, 43, 19, 34, 51, 12, 0, 45, 1, 42, 14, 17, 23, 50, 13, 41, 47, 16, 26, 28, 31, 36, 9, 44, 46, 38, 37, 15, 22, 25, 2, 21, 18, 8, 3, 49, 35, 11, 30, 27, 24, 32, 4, 7, 39, 40, 6, 29, 10, 20, 5, 48]
_KP path: =[[], [1, 0, 0, 1, 1], [1, 1, 0, 0, 1], [1, 0, 1, 1, 1], [1, 0, 0, 1, 1], [1, 1, 1, 0, 0], [1, 1, 1, 1, 1], [0, 1, 1, 0, 1], [0, 0, 1, 0, 0], [1, 1, 1, 0, 1], [1, 0, 1, 1, 1], [1, 0, 0, 1, 0], [0, 1, 0, 0, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 0], [1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [0, 1, 1, 1, 1], [1, 0, 1, 0, 1], [0, 1, 1, 0, 0], [0, 1, 0, 1, 1], [1, 0, 1, 1, 1], [0, 0, 0, 1, 1], [1, 1, 0, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [0, 0, 1, 1, 0], [1, 1, 0, 1, 0], [1, 0, 1, 1, 1], [1, 0, 1, 0, 0], [0, 1, 1, 1, 1], [1, 1, 1, 0, 1], [1, 0, 1, 1, 1], [0, 1, 0, 1, 0], [0, 1, 1, 1, 1], [0, 1, 1, 0, 1], [1, 1, 0, 0, 0], [1, 1, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 1, 1], [0, 1, 1, 1, 1], [0, 0, 0, 0, 1], [0, 1, 1, 1, 1], [0, 1, 0, 1, 1], [0, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 0, 1], [1, 0, 0, 1, 1], [1, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0]]
_Fitness value of the best chromosome: =57772.51296696824
_Average fitness value of the population: =54470.238035825256
_Age of the best chromosome (num of iterations it has lived): =6
_Local Search function: =greedy_hill_climbing
_Neighborhood TSP: =insertion
_Neighborhood KP: =bit_flip
_Number of neighbors: =10
_Number of max iterations in local search: =20
_KP constraint solver function: =kp_hard_constraint_solver
_